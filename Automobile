public abstract class Automobile{
    //Attributes
    private int modelYear;
    private String brand;



    //Overloaded constructor
    public Automobile(int modelYear, String brand){
        this.modelYear = modelYear;
        this.brand = brand;
    }

    //Accessors()
    public int getModelYear(){
        return modelYear;
    }

    public String getBrand(){
        return brand;
    }

    //Mutators()
    public void setModelYear(int newModelYear){
        modelYear = newModelYear;
    }

    public void brand(String newBrand){
        brand = newBrand;
    }

    //Methods()
    public void honk(){
        System.out.println("***Beep***");
    }
    
    public void accelerate(){
        System.out.println("The car is accelerating");
    }
    
    public void reverse(){
        System.out.println("The car is reversing");
    }
    
    public void stop(){
        System.out.println("The car has stopped");
    }
    
    //compareTo()
    public int compareTo(Object o){
        if(this.modelYear > modelYear){
            return 1;
        } else if(this.modelYear < modelYear){
            return -1;
        } else{
            return 0;
        }
    }
    
    //toString()
    public String toString(){
        return  brand + " " + modelYear;
    }
    
    //equals()
    public boolean equals(Automobile other){
        return brand == other.brand &&
               modelYear == modelYear;
    }
    
   }



 class SportsCar extends Automobile{
     
     //Overloaded constructor
     public SportsCar(int modelYear, String brand){
         super(modelYear, brand);
     }
     
     //Methods()
     @Override
     public void honk(){
        System.out.println(getBrand() + " beeps loud!");
     }
     
     @Override
     public void accelerate(){
         System.out.println(getBrand() + " is going over 200 mph.");
     }
     
     @Override
     public void reverse(){
         System.out.println(getBrand() + " is reversing quickly.");
    }
    
    @Override
    public void stop(){
        System.out.println(getBrand() + " comes to a hard stop.");
    }
    
     
    }
    

class Car extends Automobile{
     
     //Overloaded constructor
     public Car(int modelYear, String brand){
         super(modelYear, brand);
     }
     
     //Methods()
     @Override
     public void honk(){
         System.out.println(getBrand() + " is beeping.");
     }
     
     @Override
     public void accelerate(){
         System.out.println(getBrand() + " is accelerating!");
     }
     
     @Override
     public void reverse(){
         System.out.println(getBrand() + " is reversing.");
    }
    
    @Override
    public void stop(){
         System.out.println(getBrand() + " has stopped.");
    }
    
}
    


public class JunkCar extends Automobile{
    
    //Overloaded constructor
     public JunkCar(int modelYear, String brand){
         super(modelYear, brand);
     }
     
     //Methods()
     @Override
     public void honk(){
        System.out.println(getBrand() + " has a broken horn.");

     }
     
     @Override
     public void accelerate(){
         System.out.println(getBrand() + " is only going 20 mph.");
     }
     
     @Override
     public void reverse(){
        System.out.println(getBrand() + " is slowly reversing.");
    }
    
    @Override
    public void stop(){
        System.out.println(getBrand() + " brakes barely stops.");
    }
    
}


public class TestAutomobile{
    public static void main(String[] args){
        Automobile[] vehicle = new Automobile[3];
        
        vehicle[0] = new Car(2018, "Honda");
        vehicle[1] = new SportsCar(2024, "Ford mustang");
        vehicle[2] = new JunkCar(1990, "Volkswagen beetle");
        
        
        for(int i = 0; i < vehicle.length; i++){
            System.out.println(vehicle.toString());
            
            vehicle[i].honk();
            vehicle[i].accelerate();
            vehicle[i].reverse();
            vehicle[i].stop();
            System.out.println();
        }
        
    }
}
   
     
    
